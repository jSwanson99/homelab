user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /usr/local/openresty/nginx/logs/nginx.pid;

events {
	worker_connections 4096;
	use epoll;
}

http {
	include       /usr/local/openresty/nginx/conf/mime.types;
	default_type  application/octet-stream;

	log_format proxy '$remote_addr - $remote_user [$time_local] '
		'"$request" $status $body_bytes_sent '
		'"$http_referer" "$http_user_agent" '
		'$ssl_protocol/$ssl_cipher '
		'"$http_host" -> "$upstream_addr" '
		'upstream_time=$upstream_response_time '
		'request_time=$request_time';

	access_log /var/log/nginx/access.log proxy;

	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
	keepalive_timeout 65;
	types_hash_max_size 4096;

	proxy_connect_timeout 30s;
	proxy_send_timeout 90s;
	proxy_read_timeout 90s;
	proxy_buffers 32 16k;
	proxy_buffer_size 16k;
	proxy_busy_buffers_size 64k;
	proxy_temp_file_write_size 64k;
	proxy_max_temp_file_size 1024m;
	proxy_http_version 1.1;
	proxy_ssl_server_name on;

	resolver ${coredns_ip} valid=300s ipv6=off;
	resolver_timeout 10s;

	lua_shared_dict cert_cache 50m;
	lua_shared_dict dns_cache 10m;

	init_by_lua_block {
		ssl = require "ngx.ssl"
			cache = ngx.shared.cert_cache
		}

	# WebSocket support
	map $http_upgrade $connection_upgrade {
		default upgrade;
		''      close;
	}

	# Extract host and port
	map $http_host $backend_port {
		default 443;
		~*:(\d+)$ $1;
	}

	map $http_host $backend_host {
		default $http_host;
		~*^([^:]+)(:\d+)?$ $1;
	}

	# HTTP -> HTTPs
	server {
		listen 80;
		listen [::]:80;
		server_name _;

		# Allow CA certificate download
		location = /ca.crt {
			alias /etc/pki/nginx/ca/ca.crt;
			add_header Content-Type "application/x-x509-ca-cert";
		}

		# Redirect all other traffic to HTTPS
		location / {
			return 301 https://$host$request_uri;
		}
	}

	# HTTPS forward proxy
	server {
		listen 443 ssl http2 default_server;
		listen [::]:443 ssl http2 default_server;
		server_name _;

		# Default certificate
		ssl_certificate /etc/pki/nginx/server.crt;
		ssl_certificate_key /etc/pki/nginx/private/server.key;

		# SSL configuration
		ssl_protocols TLSv1.2 TLSv1.3;
		ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
		ssl_prefer_server_ciphers off;
		ssl_session_cache shared:SSL:50m;
		ssl_session_timeout 1d;
		ssl_session_tickets off;
		ssl_stapling off;

		# Dynamic certificate loading
		ssl_certificate_by_lua_block {
			${ssl_cert_lua}
		}

		# Proxy all requests
		location / {
			proxy_pass https://$backend_host:$backend_port;

			# Headers
			proxy_set_header Host $http_host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header X-Forwarded-Proto $scheme;
			proxy_set_header X-Forwarded-Host $http_host;
			proxy_set_header X-Forwarded-Port $server_port;

			# WebSocket headers
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection $connection_upgrade;

			# Disable buffering for streaming
			proxy_buffering off;
			proxy_request_buffering off;

			# Error handling
			proxy_intercept_errors on;
			error_page 502 503 504 /50x.html;
		}

		location = /50x.html {
			root /usr/share/nginx/html;
		}
	}

	# Health check endpoint
	server {
		listen 127.0.0.1:8080;
		location /health {
			access_log off;
			return 200 "healthy\n";
		}
	}
}
