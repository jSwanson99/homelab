user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /usr/local/openresty/nginx/logs/nginx.pid;

include /usr/share/nginx/modules/*.conf;

events {
	worker_connections 1024;
}

http {
	log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
		'$status $body_bytes_sent "$http_referer" '
		'"$http_user_agent" "$http_x_forwarded_for"'
		'upstream: "$proxy_host" -> "$upstream_addr" '
		'response_time: $upstream_response_time';
	access_log  /var/log/nginx/access.log  main;

	sendfile            on;
	tcp_nopush          on;
	tcp_nodelay         on;
	keepalive_timeout   65;
	types_hash_max_size 4096;
	proxy_http_version 1.1; # just a default
	proxy_request_buffering off; # immediately sends request to upstream
	# faster at the expense of longer lived upstream connections
	include             /usr/local/openresty/nginx/conf/mime.types;
	default_type        application/octet-stream;

	lua_shared_dict cert_cache 10m;
	init_by_lua_block {
		ssl = require "ngx.ssl"
		cache = ngx.shared.cert_cache
	}

	include /etc/nginx/conf.d/*.conf;

	resolver ${coredns_ip} valid=60s ipv4=on ipv6=off;

	map $http_upgrade $connection_upgrade {
		default upgrade;
		''      close;
	}
	map $http_host $backend_server {
		pve.jds.net ${proxmox_ip}:8006;
		default $http_host;
	}

	server {
		listen       80;
		listen       [::]:80;
		server_name  _;
		location / {
			proxy_pass $scheme://$backend_server$request_uri;
			# if websockets, use h1, else passthrough			
			access_by_lua_block {
				local http_version = ngx.req.http_version()
				if ngx.var.http_upgrade == "websocket" then
					ngx.var.proxy_http_version = "1.1"
				else
					ngx.var.proxy_http_version = http_version
				end
			}
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection $connection_upgrade;
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header X-Forwarded-Proto $scheme;
		}
		location = /ca.crt {
			alias /etc/pki/nginx/ca/ca.crt;
			default_type application/x-x509-ca-cert;
		}
	}

	server {
		listen       443 ssl http2;
		listen       [::]:443 ssl;
		server_name  _;

		ssl_certificate "/etc/pki/nginx/server.crt";
		ssl_certificate_key "/etc/pki/nginx/private/server.key";
		ssl_session_cache shared:SSL:10m;
		ssl_session_timeout  10m;
		ssl_protocols TLSv1.2 TLSv1.3;
		ssl_ciphers ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
		ssl_prefer_server_ciphers off;
		add_header Strict-Transport-Security "max-age=63072000" always;

		ssl_certificate_by_lua_block {
			${ssl_cert_lua}
		}

		set $proxy_http_version "";
		location / {
			# if websockets, use h1, else passthrough			
			access_by_lua_block {
				local http_version = ngx.req.http_version()
				if ngx.var.http_upgrade == "websocket" then
					ngx.var.proxy_http_version = "1.1"
				else
					ngx.var.proxy_http_version = http_version
				end
			}
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection $connection_upgrade;

			proxy_buffers 16 16k;
			proxy_buffer_size 16k;
			proxy_ssl_server_name on;

			proxy_pass $scheme://$backend_server$request_uri;
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header X-Forwarded-Proto $scheme;

			proxy_connect_timeout 60s;
			proxy_send_timeout 60s;
			proxy_read_timeout 60s;
		}
	}
}
